generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id Int @id @default(autoincrement())
  name String
  pnid String @unique
  password String
  created_at String

  updated_at String?
  deleted_at String?
  violations Violation[]
  shifts Shift[]
}

enum RegistrationSource {
  system
  gateway
}

model Car {
  id Int @id @default(autoincrement())
  plate_number String
  car_model String
  car_type String
  car_description String
  car_color String
  manufacture_year String
  registration_type String
  registration_source RegistrationSource

  source_id Int?
  source PlaceDashboard? @relation(fields: [source_id], references: [id])

  place_id Int
  place Place @relation(fields: [place_id], references: [id])

  violation Violation[]

  free_parking_hours Int?
  start_date String
  end_date String
  created_at String
}

model PartnerDashboard {
  id Int @id @default(autoincrement())
  access_username String @unique
  access_code String

  partner_id Int @unique
  partner Partner? @relation(fields: [partner_id], references: [id], onDelete: Cascade)
}

model Partner {
  id Int @id @default(autoincrement())
  name String
  email String
  city String
  postal_code String
  address String
  other_address String?
  fax_number String?
  phone_number String
  created_at String
  updated_at String?
  deleted_at String?

  owned_places Place[]
  owned_places_count Int @default(0)
  dashboard PartnerDashboard?
  place_requests PlaceRequest[]
}

model PlaceDashboard {
  id Int @id @default(autoincrement())
  access_username String @unique
  access_code String
  profile_image String?

  free_parking_hours Int
  place_name String
  place_type String
  created_at String
  updated_at String?
  deleted_at String?

  place_id Int
  place Place @relation(fields: [place_id], references: [id], onDelete: Cascade)

  registered_cars Car[]
}

model Place {
  id Int @id @default(autoincrement())
  location String
  policy String
  code String
  created_at String
  updated_at String?
  deleted_at String?
  is_verified Boolean

  partner_id Int?
  partner Partner? @relation(fields: [partner_id], references: [id], onDelete: SetNull)

  dashboard PlaceDashboard[]
  cars Car[]
  violations Violation[]
}

model Extras {
  id Int @id @default(autoincrement())
  rule_id Int @unique
  rule Rule? @relation(fields: [rule_id], references: [id], onDelete: Cascade)

  meter_receipt_number Boolean @default(false)
  meter_number Boolean @default(false)
  expiry_date Boolean @default(false)
  paid_amount Boolean @default(false)
}

model Rule {
  id Int @id @default(autoincrement())
  name String
  charge Float
  policy_time Int
  extras Extras?

  created_at String 
  updated_at String?
  deleted_at String?
}


model Brand {
  id Int @id @default(autoincrement())
  value String
}

model Color {
  id Int @id @default(autoincrement())
  value String
}

enum PlaceRequestType {
  creation
  deletion
}

enum RequestStatus {
  pending
  approved
  rejected
}

model PlaceRequest {
  id             Int       @id @default(autoincrement())
  request_type    PlaceRequestType
  
  location String?
  policy String?
  code String?

  place_id Int?

  requested_by_id  Int
  requested_by Partner @relation(fields: [requested_by_id], references: [id])
  status         RequestStatus @default(pending)
  created_at      String
  updated_at String?
  deleted_at String?

  approval PlaceRequestApproval?
}

enum ApprovalStatus {
  approved
  rejected
}

model PlaceRequestApproval {
  id           Int         @id @default(autoincrement())
  request_id    Int @unique
  request      PlaceRequest @relation(fields: [request_id], references: [id])
  
  status       ApprovalStatus
  comments     String?
  created_at    String
}


model UserPlaceLogin {
  id Int @id @default(autoincrement())
  place_name String
  login_time String
  logout_time String

  shift_id Int
  shift Shift @relation(fields: [shift_id], references: [id])
}

model Shift {
  id Int @id @default(autoincrement())
  start_date String
  end_date String?
  pnid String
  logins UserPlaceLogin[]
  total_completed_violations Int @default(0)
  created_at String

  user_id Int
  user User @relation(fields: [user_id], references: [id])

}

model ViolationImage {
  id Int @id @default(autoincrement())
  path String
  date String

  violation_id Int
  violation Violation @relation(fields: [violation_id], references: [id])
}

model PlateInfo {
  id Int @id @default(autoincrement())
  violation_id Int @unique
  violation Violation @relation(fields: [violation_id], references: [id])

  car_model String?
  plate_number String?
  manufacture_year String?
  car_description String?
  car_type String?
  car_color String?
  country_name String?
  country_code String?
}

enum PrintOption {
  hand
  post
  email
}

model TicketInfo {
  id Int @id @default(autoincrement())
  ticket_number String
  ticket_image String
  print_option PrintOption
  payment_date String?
  barcode_image String
  serial_number String
  created_at String

  violation_id Int @unique
  violation Violation @relation(fields: [violation_id], references: [id])
}

model ViolationExtraValues {
  id Int @id @default(autoincrement())

  violation_rule_id Int @unique
  violation_rule ViolationRule @relation(fields: [violation_rule_id], references: [id])

  meter_receipt_number String?
  meter_number String?
  paid_amount String?
  expiry_date String?
}

model ViolationRule {
  id Int @id @default(autoincrement())

  violation_id Int
  violation Violation @relation(fields: [violation_id], references: [id])

  name String
  charge Float
  policy_time Int
  extras_values ViolationExtraValues?
}

model Violation {
  id Int @id @default(autoincrement())
  user_id Int
  created_by User @relation(fields: [user_id], references: [id])

  ticket_comment String
  system_comment String
  images ViolationImage[]

  place_id Int
  place Place @relation(fields: [place_id], references: [id])

  total_charge Float
  ticket_info TicketInfo?

  plate_info PlateInfo?
  is_car_registered Boolean
  registered_car_id Int? @unique
  registered_car Car? @relation(fields: [registered_car_id], references: [id])
  created_at String
  deleted_at String?

  is_locked Boolean @default(false)
  rules ViolationRule[]
  session_id String
}

model Email {
  id Int @id @default(autoincrement())
  sender String
  receiver String
  content String
  subject String
  sent_at String
}

model CarLog {
  id Int @id @default(autoincrement())
  start_date String
  end_date String

  registration_source RegistrationSource
  registered_by String

  place_location String
  place_code String
  place_policy String

  car_model String
  car_type String
  car_description String
  car_color String
  plate_number String

  created_at String
  place_id Int
}

model CarLogReport {
  id Int @id @default(autoincrement())
  file_name String
  file_path String
  notes String

  total_parkings Int
  total_parking_time Int
  average_parking_time Float

  created_at String
}